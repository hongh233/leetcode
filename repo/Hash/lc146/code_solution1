// This is O(n) runtime solution, could be improved by
// using self-implemented doubly-linked list

package repo.Hash.lc146;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
public class Solution146 {
    public static class LRUCache {

        HashMap<Integer, Integer> h_main;
        LinkedList<Integer> h_usage;
        int capacity;

        public LRUCache(int capacity) {
            this.h_main = new HashMap<>();
            this.h_usage = new LinkedList<>();
            this.capacity = capacity;
        }

        public int get(int key) {
            if (h_main.containsKey(key)) {
                h_usage.remove((Integer) key); // O(n)
                h_usage.add(key);
                return h_main.get(key);
            } else {
                return -1;
            }
        }

        public void put(int key, int value) {
            if (h_main.containsKey(key)) {
                h_main.put(key, value);
                h_usage.remove((Integer) key); // O(n)
                h_usage.add(key);
            } else {
                h_main.put(key, value);
                h_usage.add(key);
            }

            if (h_main.size() > capacity) {
                Integer rmv_key = h_usage.removeFirst();
                h_main.remove(rmv_key);
            }
        }
    }

}
